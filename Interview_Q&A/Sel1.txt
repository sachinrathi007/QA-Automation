
--For parallel execution-
<suite name="Suite" parallel="tests">
	<test name="FirefoxTest">
		<parameter name="browser" value="firefox" />
		<classes>
			<class name="automationFramework.MultiBrowser" />
		</classes>
	</test>
	<test name="IETest">
		<parameter name="browser" value="ie" />
			<classes>
				<class name="automationFramework.MultiBrowser" />
			</classes> 
	</test>
</suite>


---Listner addition -
http://toolsqa.com/selenium-webdriver/testng-listeners/

ISuiteListener: It has two method in it onStart() & onFinish(). Whenever a class implements this listener, TestNG guarantees the end-user that it will invoke the methods onStart() and onFinish() before and after running a TestNG Suite. So before TestNG picks up your suite for execution, it first makes a call to onStart() method and runs whatever has been scripted in this method. In a similar way, it again makes a call to onFinish() method after a suite has been run.
-- public void onStart(ISuite arg0) {
		Reporter.log("About to begin executing Suite " + arg0.getName(), true);
   }

ITestListener: The working of this listener is also exactly the same as ISuiteListerner but the only difference is that it makes the call before and after the Test not the Suite. It has seven methods in it.

onFinish(): Invoked after all the tests have run and all their Configuration methods have been called.

onStart(): Invoked after the test class is instantiated and before any configuration method is called.

onTestFailedButWithinSuccessPercentage(ITestResult result): Invoked each time a method fails but has been annotated with successPercentage and this failure still keeps it within the success percentage requested.

onTestFailure(ITestResult result): Invoked each time a test fails.

onTestSkipped(ITestResult result): Invoked each time a test is skipped

onTestStart(ITestResult result): Invoked each time before a test will be invoked.

onTestSuccess(ITestResult result): Invoked each time a test succeeds.


<suite name="Suite-Listeners" parallel="none">

 <listeners>

 <listener class-name="utility.Listener"></listener>

 </listeners>

 <test name="Batch-Listeners">

 <classes>

 <class name="automationFramework.TestListener" />

 </classes>

 </test> 

</suite>


------------------------------------------
Interface "IRetryAnalyzer" - TestNG provides a wonderful feature using which you can retry a test case multiple times before declaring it as Failed. 

import org.testng.Assert;
import org.testng.annotations.Test;

public class Test001 {

	@Test(retryAnalyzer = Tests.RetryAnalyzer.class)
	public void Test1()
	{
		Assert.assertEquals(false, true);
	}

	@Test
	public void Test2()
	{
		Assert.assertEquals(false, true);
	}
}

----------

package Tests;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class RetryAnalyzer implements IRetryAnalyzer {

	int counter = 0;
	int retryLimit = 4;
	/*
	 * (non-Javadoc)
	 * @see org.testng.IRetryAnalyzer#retry(org.testng.ITestResult)
	 * 
	 * This method decides how many times a test needs to be rerun.
	 * TestNg will call this method every time a test fails. So we 
	 * can put some code in here to decide when to rerun the test.
	 * 
	 * Note: This method will return true if a tests needs to be retried
	 * and false it not.
	 *
	 */

	@Override
	public boolean retry(ITestResult result) {

		if(counter < retryLimit)
		{
			counter++;
			return true;
		}
		return false;
	}
}

----------------------------------------------------------------------------
Different Exceptions in Selenium -
There is a complete list of Exceptions mentioned on the Selenium Doc which you may or may not encounter in course of your  testing.

Most common Exceptions:

1) NoSuchElementException : FindBy method can’t find the element.

2) StaleElementReferenceException : This tells that element is no longer appearing on the DOM page.

3) TimeoutException: This tells that the execution is failed because the command did not complete in enough time.

4) ElementNotVisibleException: Thrown to indicate that although an element is present on the DOM, it is not visible, and so is not able to be interacted with

5) ElementNotSelectableException: Thrown to indicate that may be the element is disabled, and so is not able to select.

6) NoSuchFrame Exception in Iframe

		WebDriver driver = new FirefoxDriver();
		driver.get("http://toolsqa.wpengine.com/iframe-practice-page/");
		driver.switchTo().frame(0);
		//driver.switchTo().defaultContent();
		driver.switchTo().frame(1);
		System.out.println("Switching successfull");
----------------------------------------------------------------------------
Throw: Sometimes we want to generate exception explicitly in our code, for example in Selenium Automation Framework most of the time we print self-written logs, once we catch an exception and then we need to throw that exception back to the system so that the test case can be terminated. Throw keyword is used to throw exception to the runtime to handle it.

Throws: When we are throwing any exception in a method and not handling it, then we need to use throws keyword in method signature to let caller program know the exceptions that might be thrown by the method.

public static void anyFunction() throws Exception{
 
    try{
 
		// write your code here    
 
	}catch (Exception e){
 
		// Do whatever you wish to do here
 
		// Now throw the exception back to the system
 
        throw(e);
 
        }
 
    }