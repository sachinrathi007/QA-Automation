
WebDriver driver = new FirefoxDriver();
WebDriver driver = new ChromeDriver();
WebDriver driver = new InternetExplorerDriver();

java.lang.Thread.sleep(long milliseconds)

Implicit Wait: Implicit waits are used to provide a default waiting time (say 30 seconds) between each consecutive test step/command across the entire test script. Thus, subsequent test step would only execute when the 30 seconds have elapsed after executing the previous test step/command.
It's global setting applicable for all elements and if element appear before specified time than script will start executing otherwise script will throw NoSuchElementException.
Ex - driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);


Explicit Wait: This is recomonded. Explicit waits are used to halt the execution till the time a particular condition is met or the maximum time has elapsed.
Ex -
WebDriverWait wait = new WebDriverWait(driver, 10);
WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id("someid")));


FluentWait:FluentWait uses two parameters mainly – timeout value and polling frequency. In the above syntax we took time out value as 45 seconds and polling frequency as 5 seconds. The maximum amount of time (45 seconds) to wait for a condition and the frequency (5 seconds) to check the success or failure of a specified condition. If the element is located with in this time frame it will perform the operations else it will throw an “ElementNotVisibleException”
Ex - 
Wait wait = new FluentWait<WebDriver>(driver)
.withTimeout(45, TimeUnit.SECONDS)
.pollingevery(5, TimeUnit.SECONDS)
.ignoring(NoSuchElementException.class);

---------------------------

WebElement username = drv.findElement(By.id(“Email”));
// entering username
username.sendKeys(“sth”);

---------------------------
To check Element's visibility- All return boolean value
isDisplayed()
isSelected()
isEnabled()
Ex - boolean searchIconEnabled = driver.findElement(By.id(“gbqfb”)).isEnabled();
--------------------------
To get text val-
String Text = driver.findElement(By.id(“Text”)).getText();

----------------------
To select a value in dropdown, 3methods only -
Select select = new Select(driver.findElement(By.id(“SelectID_One”)));
select.selectByValue(“greenvalue”);
//select.selectByVisibleText(“Lime”);
//select.selectByIndex(2);

----------------------
Navigation command-
driver.navigate().back();
driver.navigate().forward();
driver.navigate().refresh();
driver.navigate().to(“https://google.com”);

---------------------

click on a hyper link using linkText?
driver.findElement(By.linkText(“Google”)).click();
//driver.findElement(By.partialLinkText(“Goo”)).click();

---------------------

iFrame-
It is used to insert another document within the current HTML document or simply a web page into a web page.

Locating iframe using tagName
driver.switchTo().frame(driver.findElements(By.tagName(“iframe”).get(0));
driver.switchTo().alert();
driver.switchTo().window("windowName");

 
--Locating iframe using index
driver.switchTo().frame(0);
//driver.switchTo().frame(“name of the frame”);

frame(WebElement element)
Select Parent Window
driver.switchTo().defaultContent();

-----------------------------
findElement(): It is used to find only first element in the current web page matching to the specified locator value.

findElements(): It is used to find all the elements in the current web page matching to the specified locator value. 

List <WebElement> elementList = driver.findElements(By.xpath(“//div[@id=’example’]//ul//li”));

----------------------------
close(): Close only one on which user is currently working.
quite(): Close all windows.
WindowsUtils.killByName("chromedriver.exe"); -- Provided by org.selenium.
----------------------------

web-based pop up handling by Alert Interface-
void dismiss() – It clicks on the “Cancel” button as soon as the pop-up window appears.
void accept() – It  clicks on the “Ok” button as soon as the pop-up window appears.
String getText() – The getText() method returns the text displayed on the alert box.
void sendKeys(String stringToSend) – The sendKeys() method enters the specified string pattern into the alert box.
Ex - Alert alert = driver.switchTo().alert();
     alert.accept();


-----------------------------
Windows Based Alerts can't handle by Selenium webdriver. These can only handle by third party tools like - AutoIT, Robot class etc.

-----------------------------
//verify the title of the web page
assertTrue(“Ttle of the window”,driver.getTitle().equals(“Title of the page”));

-----------------------------
Automate mouse and keyboard events via Action() Interface-
Ex-
Actions actions=new Actions(driver);
actions.moveToElement(driver.findElement(By.id("id of the dropdown"))).perform();
// Clicking on one of the items in the list options
WebElement element=driver.findElement(By.id("id of the sub link"));
subLinkOption.click();
//actions.click().build().perform();

//action.doubleClick(ele).build().perform(); - To perform double click

-----------------------------
Drag and Drop - 
//To get source locator
WebElement sourceLocator = driver.findElement(By.xpath("xpath"));
//To get target locator
WebElement targetLocator = driver.findElement(By.xpath("xpath"));
//create object 'action' of Actions class
Actions action = new Actions(driver);
//use dragAndDrop() method. It accepts two parametes source and target.
action.dragAndDrop(sourceLocator, targetLocator).build().perform();
-----------------------------

driver.findElement(By.id(“id“)).getCssValue(“name of css attribute”);
driver.findElement(By.id(“id“)).getCssValue(“font-size”);

-----------------------------
To Take ScreenShots-
public class CaptureScreenshot {
WebDriver driver;
@Before
public void setUp() throws Exception {
driver = new FirefoxDriver();
driver.get("https://google.com");
}
@After
public void tearDown() throws Exception {
driver.quit();
}

@Test
public void test() throws IOException {
// Code to capture the screenshot
File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
// Code to copy the screenshot in the desired location
File destPath = new File("C:\\CaptureScreenshot\\google.jpg");
FileUtils.copyFile(scrFile, destPath)
Reporter.addScreenCaptureFromPath(destPath.toString());
}
}


------------------------------------
No, captcha and barcode reader cannot be automated.
------------------------------------
9. Why do you prefer Selenium Automation Tool?


Free and open source
Have large user base and helping communities
Cross-browser compatibility
Platform compatibility
Multiple programming languages support


------------------------------------
Which is the only browser that supports Selenium IDE to be used?

Firefox

------------------------------------

types of WebDriver APIs available in Selenium?

Firefox Driver
Gecko Driver
InternetExplorer Driver
Chrome Driver
HTML Driver
Opera Driver
Safari Driver
Android Driver
iPhone Driver
EventFiringWebDriver

------------------------------------

locators are:

ID – Practical example
ClassName – Practical example
Name – Practical example
TagName – Practical example
LinkText – Practical example
PartialLinkText – Practical example
XPath – Practical example
CSS Selector – Practical example


------------------------------------
Double Slash “//” – relative path
------------------------------------
Single Slash “/” - absolute path

------------------------------------

Assert: In simple words, if the assert condition is true then the program control will execute the next test step but if the condition is false, the execution will stop and further test step will not be executed.

Verify: In simple words, there won’t be any halt in the test execution even though the verify condition is true or false.
------------------------------------

Soft Assert: Soft Assert collects errors during @Test Soft Assert does not throw an exception when an assert fails and would continue with the next step after the assert statement.

Hard Assert: Hard Assert throws an AssertException immediately when an assert statement fails and test suite continues with next @Test

------------------------------------
What are the verification points available in Selenium?

------------------------------------
To check for page title
To check for certain text
To check for certain element (text box, button, drop down, etc.)
------------------------------------
To launch Firefox Driver:
WebDriver driver = new FirefoxDriver();
--FirefoxDriver is a Java class, and it implements the WebDriver interface.
------------------------------------

What is the super interface of WebDriver?

SearchContext.

------------------------------------
What are the different exceptions you have faced in Selenium WebDriver?

Some of the exceptions I have faced in my current project are

ElementNotVisibleException
StaleElementReferenceException
Element Not visible Exception:

This exception will be thrown when you are trying to locate a particular element on webpage that is not currently visible eventhough it is present in the DOM. Also sometimes, if you are trying to locate an element with the xpath which associates with two or more element.

Stale Element Reference Exception:
A stale element reference exception is thrown in one of two cases, the first being more common than the second.

The element has been deleted entirely.
The element is no longer attached to the DOM.
We face this stale element reference exception when the element we are interacting is destroyed and then recreated again. When this happens the reference of the element in the DOM becomes stale. Hence we are not able to get the reference to the element.

Some other exceptions we usually face are as follows:

WebDriverException
TimeoutException
NoAlertPresentException
NoSuchWindowException
NoSuchElementException
TimeoutException

------------------------------------
WebDriver driver = new FirefoxDriver();
driver.get("https://www.gmail.com"); //get text of a web element
driver.findElement(By.xpath("xpath")).sendKeys("Software Testing Material Website");
driver.findElement(By.xpath("xpath_of_element1")).clear();
//returns the value of the attribute
String attributeValue = driver.findElement(By.name("nameSelenium")).getAttribute("value");


//submit
How to submit page without submit()?
driver.findElement(By.id("form_1")).submit();
driver.findElement(By.xpath("xpath")).sendKeys(Keys.ENTER); //Press Enter key
	
driver.getCurrentUrl(); // to get Current URL
Set<String> d = getWindowHandles(); // to get all URL
driver.manage().window().maximize(); // To maximize the window
------------------------------------

How to input text in the text box without calling the sendKeys()?

// To initialize js object
JavascriptExecutor JS = (JavascriptExecutor)webdriver;
// To enter username
JS.executeScript("document.getElementById('User').value='SoftwareTestingMaterial.com'");
// To enter password
JS.executeScript("document.getElementById('Pass').value='tester'");
------------------------------------

driver.navigate.to(“url”) ==  driver.get() //both works same
driver.get(): To open an URL and it will wait till the whole page gets loaded. Internally calls "onload". So if app is using many AJAX then its not recomandedas WebDriver may not know when it has completely loaded. If you need to ensure such pages are fully loaded then you can use waits.
driver.navigate.get(): To navigate to an URL and It will not wait till the whole page gets loaded

------------------------------------
driver.navigate().forward(); – to navigate to the next web page with reference to the browser’s history
driver.navigate().back(); – takes back to the previous webpage with reference to the browser’s history
driver.navigate().refresh(); – to refresh the current web page thereby reloading all the web elements
driver.navigate().to(“url”); – to launch a new web browser window and navigate to the specified URL

------------------------------------

multiple ways to refresh a page in selenium-

Using driver.navigate().refresh() command as mentioned in the question 45
Using driver.navigate().to(“URL”) on the current URL or driver.navigate().to(driver.getCurrentUrl());
Using driver.get(“URL”) on the current URL or using driver.getCurrentUrl()
Using sendKeys(Keys.F5) on any textbox on the webpage
------------------------------------
driver.close(): To close current WebDriver instance
driver.quit(): To close all the opened WebDriver instances

------------------------------------
What is the difference between driver.findElement() and driver.findElements() commands?

The difference between driver.findElement() and driver.findElements() commands is-

findElement() returns a single WebElement (found first) based on the locator passed as parameter. Whereas findElements() returns a list of WebElements, all satisfying the locator value passed.

Syntax of findElement()-
WebElement textbox = driver.findElement(By.id(“textBoxLocator”));
Syntax of findElements()-
List <WebElement> elements = driver.findElements(By.id(“value”));
Another difference between the two is- if no element is found then findElement() throws NoSuchElementException whereas findElements() returns a list of 0 elements.

------------------------------------

to find whether an element is displayed on the web page? 
boolean elePresent = driver.findElement(By.xpath("xpath")).isDisplayed();
isSelected()
isEnabled()
------------------------------------

Soap is simple XML-based protocol. It allows the exchange of information over HTTP.
SoapUI is an open source cross-platform web service testing tool.
Selenium is a suite of test tools to automate browsers across many platforms.
Selenium Webdriver makes direct calls to the browsers. It uses browsers native support for automation.
Selenium integrates with SoapUI using Groovy.



------------------------------------
select a value in a dropdown?
WebElement mySelectElement = driver.findElement(By.name("dropdown"));
Select dropdown = new Select(mySelectElement);
dropdown.selectByVisibleText(Text);
dropdown.selectByIndex(Index);
dropdown.selectByValue(Value);

------------------------------------

way of capturing screenshot of failed test cases using Selenium WebDriver is to use ITestResult Interface.

ITestResult interface provides the test case execution status and test case name
We do place the screen capture steps in a separate method using AfterMethod TestNG Annotation. If we use TestNG AfterMethod annotation then this particular method (AfterMethod) executes after every test execution.
package softwareTestingMaterial;
import java.io.File;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;

public class ScreenshotFailedCases {
	// Create Webdriver reference
	static WebDriver driver;
	
	@Test
	public static void captureScreenMethod() throws Exception{
		System.setProperty("webdriver.gecko.driver","D://Selenium Environment//Drivers//geckodriver.exe");
		driver = new FirefoxDriver();
		driver.manage().window().maximize();
		driver.get("https://www.softwaretestingmaterial.com");
		driver.navigate().refresh();
		//driver.findElement(By.xpath("//*[@id='cse-search-box']/div/input[4]")).sendKeys("agile"); //Statement with correct Xpath
		driver.findElement(By.xpath("//*[@id='cse']")).sendKeys("agile"); //Statement with incorrect Xpath	
		
	}
	@AfterMethod //AfterMethod annotation - This method executes after every test execution
	public void screenShot(ITestResult result){
	//using ITestResult.FAILURE is equals to result.getStatus then it enter into if condition
		if(ITestResult.FAILURE==result.getStatus()){
			try{
				// To create reference of TakesScreenshot
				TakesScreenshot screenshot=(TakesScreenshot)driver;
				// Call method to capture screenshot
				File src=screenshot.getScreenshotAs(OutputType.FILE);
				// Copy files to specific location 
				// result.getName() will return name of test case so that screenshot name will be same as test case name
				FileUtils.copyFile(src, new File("D:\\"+result.getName()+".png"));
				System.out.println("Successfully captured a screenshot");
			}catch (Exception e){
				System.out.println("Exception while taking screenshot "+e.getMessage());
			} 
	}
	driver.quit();
	}
}

------------------------------------
Web based popups Handling-
To handle Browser based Alerts (Web based popups), we use Alert Interface. 
Alert alert = driver.switchTo().alert();
alert.accept();
alert.dismiss();
alert.gettext();
alert.sendKeys("Sachin");


Windows based popups Handling- Can be done by third party tool as AutoIT, Robot class etc.

------------------------------------
List some scenarios which we cannot automate using Selenium WebDriver?

1. Bitmap comparison Is not possible using Selenium WebDriver
2. Automating Captcha is not possible using Selenium WebDriver
3. We can not read bar code using Selenium WebDriver

------------------------------------
What is Object Repository in Selenium WebDriver?

Object Repository is used to store element locator values in a centralized location instead 
of hard coding them within the scripts. We do create a property file (.properties) to store all the element locators and these property files act as an object repository in Selenium WebDriver.
------------------------------------------------------------------------
//How to read excel files using Apache POI
public class ReadExcel {
	public static void main (String [] args) throws IOException{
                        //I have placed an excel file 'Test.xlsx' in my D Driver 
			FileInputStream fis = new FileInputStream("D:\\Test.xlsx");
			XSSFWorkbook workbook = new XSSFWorkbook(fis);
			XSSFSheet sheet = workbook.getSheetAt(0);
                        //I have added test data in the cell A1 as "SoftwareTestingMaterial.com"
                        //Cell A1 = row 0 and column 0. It reads first row as 0 and Column A as 0.
			Row row = sheet.getRow(0);
			Cell cell = row.getCell(0);
                       	System.out.println(cell);
			System.out.println(sheet.getRow(0).getCell(0));
			//String cellval = cell.getStringCellValue();
			//System.out.println(cellval);
			
	}		
}

------------------------------------
What is page factory? 

We have seen that ‘Page Object Model’ is a way of representing an application in a test 
framework. For every ‘page’ in the application, we create a Page Object to reference the ‘page’ whereas a ‘Page Factory’ is one way of implementing the ‘Page Object Model’.

------------------------------------
What is the difference between Page Object Model (POM) and Page Factory?

Page Object is a class that represents a web page and hold the functionality and members.
Page Factory is a way to initialize the web elements you want to interact with within the page object when you create an instance of it.

86. What are the advantages of Page Object Model Framework?

Code reusability – We could achieve code reusability by writing the code once and use it in different tests.

Code maintainability – There is a clean separation between test code and page specific code such as locators and layout which becomes very easy to maintain code. Code changes only on Page Object Classes when a UI change occurs. It enhances test maintenance and reduces code duplication.

Object Repository – Each page will be defined as a java class. All the fields in the page will be defined in an interface as members. The class will then implement the interface.

Readability – Improves readability due to clean separation between test code and page specific code

------------------------------------
Some of the scenarios we may need to capture a screenshot using Selenium WebDriver are

i. Application issues
ii. Assertion Failure
iii. Difficulty to find Webelements on the web page
iv. Timeout to find Webelements on the web page

------------------------------------
How to handle hidden elements in Selenium WebDriver?
(JavascriptExecutor(driver)).executeScript("document.getElementsByClassName(ElementLocator).click();");


How to read a JavaScript variable in Selenium WebDriver?

By using JavascriptExecutor
// To initialize the JS object.
JavascriptExecutor JS = (JavascriptExecutor) webdriver;
// To get the site title.
String title = (String)JS.executeScript("return document.title");
System.out.println("Title of the webpage : " + title);

------------------------------------------------------------------------
How to find more than one web element in the list?
// To store the list
List <WebElement> eleList = driver.findElements(By.xpath("xpath"));
// To fetch the size of the list
int listSize = eleList.size();
//for loop
for (int i=0; i<listSize; i++)
{
	// Clicking on each link
	links.get(i).click();
	// Navigating back to the previous page that stores the links
	driver.navigate().back();
}

------------------------------------

// The below function verifyLink(String urlLink) verifies any broken links and return the server status. 
	public static void verifyLink(String urlLink) {
        //Sometimes we may face exception "java.net.MalformedURLException". Keep the code in try catch block to continue the broken link analysis
        try {
			//Use URL Class - Create object of the URL Class and pass the urlLink as parameter 
			URL link = new URL(urlLink);
			// Create a connection using URL object (i.e., link)
			HttpURLConnection httpConn =(HttpURLConnection)link.openConnection();
			//Set the timeout for 2 seconds
			httpConn.setConnectTimeout(2000);
			//connect using connect method
			httpConn.connect();
			//use getResponseCode() to get the response code. 
				if(httpConn.getResponseCode()== 200) {	
					System.out.println(urlLink+" - "+httpConn.getResponseMessage());
				}
				if(httpConn.getResponseCode()== 404) {
					System.out.println(urlLink+" - "+httpConn.getResponseMessage());
				}
			}
			//getResponseCode method returns = IOException - if an error occurred connecting to the server. 
		catch (Exception e) {
			//e.printStackTrace();
		}
    } 

------------------------------------


public static void main (String [] args) throws IOException{
                        //I have placed an excel file 'Test.xlsx' in my D Driver 
			FileInputStream fis = new FileInputStream("D:\\Test.xlsx");
			XSSFWorkbook workbook = new XSSFWorkbook(fis);
			XSSFSheet sheet = workbook.getSheetAt(0);
                        //I have added test data in the cell A1 as "SoftwareTestingMaterial.com"
                        //Cell A1 = row 0 and column 0. It reads first row as 0 and Column A as 0.
			Row row = sheet.getRow(0);
			Cell cell = row.getCell(0);
                       	System.out.println(cell);
			System.out.println(sheet.getRow(0).getCell(0));
			//String cellval = cell.getStringCellValue();
			//System.out.println(cellval);
			
	}

------------------------------------
AJAX stands for Asynchronous JavaScript and XML. AJAX allows the web page to retrieve small amounts of data from the server without reloading the entire page. AJAX sends HTTP requests from the client to server and then process the server’s response without reloading the entire page. To handle AJAX controls, wait commands may not work. It’s just because the actual page is not going to refresh.

When you click on a submit button, the required information may appear on the web page without refreshing the browser. Sometimes it may load in a second and sometimes it may take longer. We have no control over loading time. The best approach to handle this kind of situations in selenium is to use dynamic waits (i.e. WebDriverWait in combination with ExpectedCondition)

wait.until(ExpectedConditions.titleIs(“Deal of the Day”));
wait.until(ExpectedConditions.elementToBeClickable(By.xpath("xpath")));
wait.until(ExpectedConditions.alertIsPresent()) !=null);
------------------------------------

84. What is Page Factory? 

We have seen that ‘Page Object Model’ is a way of representing an application in a test framework. For every ‘page’ in the application, we create a Page Object to reference the ‘page’ whereas a ‘Page Factory’ is one way of implementing the ‘Page Object Model’.

85. What is the difference between Page Object Model (POM) and Page Factory?

Page Object is a class that represents a web page and hold the functionality and members.
Page Factory is a way to initialize the web elements you want to interact with within the page object when you create an instance of it.


------------------------------------------------------------------------
88. How to Upload a file in Selenium WebDriver?

There are two cases which are majorly used to upload a file in Selenium WebDriver such as using SendKeys Method and using AutoIT Script.

------------------------------------
89. How to Download a file in Selenium WebDriver?

By using AutoIT script, we could download a file in Selenium WebDriver.

------------------------------------
We use JDBC Driver to connect the Database in Selenium. We could only interact with Browser using Selenium WebDriver.

------------------------------------
Scroll UP and Scroll Down -

@Test
	public void scrollDown(){
		System.setProperty("webdriver.gecko.driver","D://Selenium Environment//Drivers//geckodriver.exe");
		WebDriver driver = new FirefoxDriver();
		driver.navigate().to("https://www.softwaretestingmaterial.com");
		//to perform Scroll on application using  Selenium
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-250)", "");
//			js.executeScript("window.scrollBy(0,document.body.scrollHeight)"); --Scroll Up
	}


------------------------------------
How To Highlight Element Using Selenium WebDriver
@Test
	public void highlighterElement() {
		
		System.setProperty("webdriver.gecko.driver", "D:\\Selenium Environment\\Drivers\\geckodriver.exe");
		WebDriver driver = new FirefoxDriver();
		driver.manage().window().maximize();
		driver.get("https://www.gmail.com");
		WebElement ele = driver.findElement(By.xpath("//*[@id='Email']"));
                //Call the highlighterMethod and pass webdriver and WebElement which you want to highlight as arguments.
		highLighterMethod(driver,ele);
		ele.sendKeys("SoftwareTestingMaterial.com");
	}
	
        //Creating a custom function
	public void highLighterMethod(WebDriver driver, WebElement element){
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');", element);
	}
------------------------------------------------------------------------
Simple Alert Pop up - document.alert("This is a simple alert");



	public static void main(String[] args) {
		WebDriver driver = new FirefoxDriver();
		driver.get("http://toolsqa.wpengine.com/handling-alerts-using-selenium-webdriver/");
		driver.manage().window().maximize();
		// This step will result in an alert on screen
		driver.findElement(By.xpath("//*[@id='content']/p[4]/button")).click();

		Alert alert_T = driver.switchTo().alert();
		String alertText = alert_T.getText(); //We can get the alert text for all confirmation, simple, prompt. For prompt we have a text box and we need to send some text into it.
		//alert_T.sendKeys("Accepting the alert");
		//alert_T.accept();
System.out.println("Alert text is " + alertText);
		simpleAlert.accept();
	}


Confirm Alert box - var popuResult = confirm("Confirm pop up with OK and Cancel button");
Prompt Alert box - var person = prompt("Do you like toolsqa?", "Yes/No");

------------------------------------
How to delete Browser Cookies with Selenium Web Driver?
driver.Manage().Cookies.DeleteAllCookies();
------------------------------------


------------------------------------

Some of the common assertions supported by TestNG are

assertEqual(String actual,String expected)
assertEqual(String actual,String expected, String message)
assertEquals(boolean actual,boolean expected)
assertTrue(condition)
assertTrue(condition, message)
assertFalse(condition)
assertFalse(condition, message)
------------------------------------

------------------------------------
------------------------------------
TestNG parameterization - 
here are two ways to set these parameters:

with testng.xml
with Data Providers

1) with testng.xml -
public class ParameterizedTest {
	
	@Test
	@Parameters("browser")
	public void parameterizedTest(String browser){
		if(browser.equals("firefox")){
			System.out.println("Open Firefox Driver");
		}else if(browser.equals("chrome")){
			System.out.println("Open Chrome Driver");
		}
	}	
}

TestNg.xml - 
<suite name="softwaretestingmaterial">
	<test name="testngTest">
		<parameter name="browser" value="firefox"/>
		<classes>
			<class name="softwareTestingMaterial.ParameterizedTest" />
		</classes>
	</test>	
</suite>


------------------------------------
if you want to run two different sets of tests back to back
@Test (groups = { "smokeTest", "functionalTest" })
public void loginTest(){
System.out.println("Logged in successfully");
}
------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >

<suite name="softwaretestingmaterial">
	<test name="testngTest">
	
		<groups>
			<run>
				<include name="smokeTest" />
			</run>
		</groups>
	
		<classes>
			<class name="softwareTestingMaterial.TestCase1" />
			<class name="softwareTestingMaterial.TestCase2" />
		</classes>
	</test>
</suite>
------------------------------------
https://www.softwaretestingmaterial.com/testng-groups/
https://www.softwaretestingmaterial.com/testng-listeners/
https://www.softwaretestingmaterial.com/testng-parameterization-using-dataproviders/
https://www.softwaretestingmaterial.com/oops-concept-in-automation-framework/
------------------------------------
There are a number of ways to scroll a page using Selenium WebDriver in Java. Some of them are discussed below.

If you want to scroll the page vertically to perform some action, you can do it using the following JavaScript.
        ((JavascriptExecutor)

driver).executeScript(“window.scrollTo(0,

document.body.scrollHeight)”);

            Where ‘JavascriptExecutor’ is an interface, which helps executing JavaScript through Selenium WebDriver. You can use the following code to import.

import org.openqa.selenium.JavascriptExecutor; 

2.      If you want to scroll at a particular element, you need to use the following JavaScript.

WebElement element =

driver.findElement(By.xpath(“//input [@id=’email’]”));

((JavascriptExecutor)

driver).executeScript(“arguments[0].scrollIntoView();”, element);

Where ‘element’ is the locator where you want to scroll.

3.      If you want to scroll at a particular coordinate, use the following JavaScript.  

((JavascriptExecutor)

driver).executeScript(“window.scrollBy(200,300)”);

Where ‘200,300’ are the coordinates.

If you want to scroll up in a vertical direction, you can use the following JavaScript.
((JavascriptExecutor)

driver).executeScript(“window.scrollTo(document.body.scrollHeight,0)”);

If you want to scroll horizontally in the right direction, use the following JavaScript.
((JavascriptExecutor)

driver).executeScript(“window.scrollBy(2000,0)”);

If you want to scroll horizontally in the left direction, use the following JavaScript.
((JavascriptExecutor)

driver).executeScript(“window.scrollBy(-2000,0)”);

------------------------------------



------------------------------------


------------------------------------

windows based alert
------------------------------------

------------------------------------
https://www.softwaretestingmaterial.com/selenium-interview-questions/ --66qsn